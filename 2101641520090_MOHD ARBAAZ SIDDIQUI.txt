//  QUESTION:-   CHECK WHETHER THE GIVN ARRAY IS IN ARITHMETIC PROGESSION OR NOT


// TIME COMPLEXITY = O(NLOGN) AND SPACE COMPLEXITY = O(1)


// #include<bits/stdc++.h>
// using namespace std;
// int main()
// {
//     vector<int>arr;
//     int a,n;
//     cin >> n;
//     for(int i =0;i < n;i++)
//     {
//         cin >> a;
//         arr.push_back(a);
//     }
//     sort(arr.begin(), arr.end());
//     int d = arr[0]-arr[1];
//     for(int i=0;i<n-1;i++)
//     {
//         if(arr[i] - arr[i+1] != d) return false;
//     }
//     return true;
// }




// TIME COMPLEXITY = O(N) AND SPACE COMPLEXITY = O(N)





// #include<bits/stdc++.h>
// using namespace std;
// int main()
// {
//     int n,a;
//     int first_min = INT_MAX;
//     int second_min = INT_MAX;
//     cin >> n;
//     vector<int>arr;
//     for(int i=0;i<n;i++)
//     {
//         cin >> a;
//         arr.push_back(a);
//     }
//     unordered_set<int> s(arr.begin(), arr.end());
//     for(int i=0;i<n;i++)
//     {
//         if(arr[i] < first_min)
//         {
//             second_min = first_min;
//             first_min = arr[i];
//         }
//         else{
//             second_min = min(second_min, arr[i]);
//         }
//     }
//     int d = second_min - first_min;
//     int a1 = first_min,term;
//     for(int i=1;i<n;i++)
//     {
//         term = a1 + (n-1)*d;
//         if (s.find(term) == s.end()) return false;
//     }
//     return 1;
// }



// SORT COLORS  



    //     int zero = 0;
    //     int one = 0;
    //     int two = 0;
    //     int n = nums.size();
    //     for(int i = 0 ; i < n; ++i)
    //     {
    //         if(nums[i] == 0) zero++;
    //         else if(nums[i] == 1) one++;
    //         else two++;
    //     }
    //     int k=0;
    //     while(zero > 0)
    //     {
    //         nums[k] = 0;
    //         zero--;
    //         k++;
    //     }
    //     while(one > 0)
    //     {
    //         nums[k] = 1;
    //         one--;
    //         k++;
    //     }
    //     while(two > 0)
    //     {
    //         nums[k] = 2;
    //         two--;
    //         k++;
    //     }
    // }


// rotate image

class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
        int n = matrix[0].size();
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<i;j++)
            {
                swap(matrix[j][i] ,matrix[i][j]);
            }
        }
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n/2;j++)
            {
                swap(matrix[i][j], matrix[i][n-1-j]);
            }
        }
        
    }
};


